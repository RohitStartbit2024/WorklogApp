@page "/manager/reports"
@using Microsoft.Extensions.Caching.Memory
@using WorklogApp.Models
@using WorklogApp.Services
@using OfficeOpenXml
@inject WorklogService WorklogService
@inject ProjectService ProjectService
@inject CurrentUserService CurrentUserService
@inject UserService UserService
@inject IHttpContextAccessor HttpContextAccessor
@inject IMemoryCache Cache
@inject NavigationManager Navigation

<ProtectedPage TPage="object" AllowedRoles="@managerRoles">

    <h3 style="color:#6247aa; padding:.75rem 1.25rem;text-align:center;">Manager Worklog Reports</h3>

    @if (!CurrentUserLoaded)
    {
        <p><em>Loading...</em></p>
    }
    else if (CurrentUserService.CurrentUser == null)
    {
        <p style="color:#c00;font-weight:600;">Not authorized</p>
    }
    else
    {
        <div style="display:flex;gap:1rem;flex-wrap:wrap;margin-bottom:1rem;align-items:flex-end;">
            <div style="flex:1;max-width:30%;min-width:200px;margin-bottom:1rem;">
                <label style="font-weight:600;color:#102b3f;display:block;margin-bottom:.25rem;">View By:</label>
                <select @bind="filterMode" style="width:100%;padding:.5rem .75rem;border-radius:.375rem;
                           border:1px solid #ccc;background:#f7f0fc;
                           box-shadow:0 2px 5px rgba(0,0,0,.1);transition:all .3s ease;">
                    <option value="Project">Project</option>
                    <option value="Employee">Employee</option>
                </select>
            </div>

            @if (filteredWorklogs.Count > 0)
            {
                <div style="flex:1;max-width:20%;min-width:200px;margin-bottom:1rem;display:flex;align-items:flex-end;">
                    <button @onclick="PrepareExport"
                            style="flex:1;background:#062726;color:white;padding:.5rem 1rem;border:none;
                                   border-radius:.375rem;box-shadow:0 3px 8px rgba(0,0,0,.2);
                                   cursor:pointer;transition:all .3s ease;">
                        Export to Excel
                    </button>
                </div>
            }
        </div>

        @if (filterMode == "Project")
        {
            <div style="display:flex;gap:1rem;flex-wrap:wrap;margin-bottom:1rem;">
                <div style="flex:1;min-width:220px;">
                    <label style="font-weight:600;color:#102b3f;">Select Project:</label>
                    <select @bind="selectedProjectId" style="width:100%;padding:.5rem .75rem;border-radius:.375rem;border:1px solid #ccc;background:#f7f0fc;box-shadow:0 2px 5px rgba(0,0,0,.1);">
                        <option value="">-- All Projects --</option>
                        @foreach (var p in projects)
                        {
                            <option value="@p.Id">@p.Name</option>
                        }
                    </select>
                </div>
                <div style="flex:1;min-width:160px;">
                    <label style="font-weight:600;color:#102b3f;">Start Date:</label>
                    <input type="date" @bind="startDate" style="width:100%;padding:.5rem .75rem;border-radius:.375rem;border:1px solid #ccc;background:#fff;box-shadow:0 2px 5px rgba(0,0,0,.1);" />
                </div>
                <div style="flex:1;min-width:160px;">
                    <label style="font-weight:600;color:#102b3f;">End Date:</label>
                    <input type="date" @bind="endDate" style="width:100%;padding:.5rem .75rem;border-radius:.375rem;border:1px solid #ccc;background:#fff;box-shadow:0 2px 5px rgba(0,0,0,.1);" />
                </div>
            </div>

            <button @onclick="LoadWorklogs" style="background:linear-gradient(90deg,#a06cd5,#6247aa);color:white;padding:.5rem 1rem;border:none;border-radius:.375rem;box-shadow:0 3px 8px rgba(0,0,0,.2);cursor:pointer;transition:all .3s ease;margin-bottom:1rem;">Search</button>

            <div style="display:flex;gap:1rem;flex-wrap:wrap;margin-bottom:1rem;">
                <div style="flex:2;min-width:220px;">
                    <label style="font-weight:600;color:#102b3f;">Search:</label>
                    <input type="text" placeholder="Search by ID or Name"
                           @bind="searchTerm" @bind:event="oninput"
                           style="width:100%;padding:.5rem .75rem;border-radius:.375rem;
                              border:1px solid #ccc;background:#fff;
                              box-shadow:0 2px 5px rgba(0,0,0,.1);" />
                </div>

                <div style="flex:1;min-width:180px;">
                    <label style="font-weight:600;color:#102b3f;">Status:</label>
                    <select @bind="selectedStatus" @bind:event="onchange"
                            style="width:100%;padding:.5rem .75rem;border-radius:.375rem;
                               border:1px solid #ccc;background:#f7f0fc;
                               box-shadow:0 2px 5px rgba(0,0,0,.1);">
                        <option value="">-- All --</option>
                        @foreach (var status in Enum.GetValues<WorklogStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
            </div>

            <table style="width:100%;border-collapse:collapse;box-shadow:0 3px 8px rgba(0,0,0,.1);
                      border-radius:.5rem;overflow:hidden;margin-bottom:2rem;">
                <thead style="background:#6247aa;color:white;">
                    <tr>
                        <th style="padding:.75rem;text-align:left;cursor:pointer;">S.No</th>
                        <th style="padding:.75rem;">Employee Id</th>
                        <th style="padding:.75rem;cursor:pointer;">Employee Name</th>
                        <th style="padding:.75rem;cursor:pointer;">Date</th>
                        <th style="padding:.75rem;">Worklog Description</th>
                        <th style="padding:.75rem;cursor:pointer;">Online</th>
                        <th style="padding:.75rem;cursor:pointer;">Offline</th>
                        <th style="padding:.75rem;cursor:pointer;">Other</th>
                        <th style="padding:.75rem;cursor:pointer;">Total</th>
                        <th style="padding:.75rem;cursor:pointer;">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredWorklogs != null)
                    {
                        int index = 1;
                        foreach (var w in filteredWorklogs)
                        {
                            <tr style="background:@(index % 2 == 0 ? "#f7f0fc" : "white");transition:all .3s ease;" onmouseover="this.style.background='#e2cfea'" onmouseout="this.style.background='@(index % 2 == 0 ? "#f7f0fc" : "white")'">
                                <td style="padding:.75rem;">@index</td>
                                <td style="padding:.75rem;">@w.User?.EmployeeId</td>
                                <td style="padding:.75rem;">@w.User?.FirstName @w.User?.LastName</td>
                                <td style="padding:.75rem;">@w.Date.ToShortDateString()</td>
                                <td style="padding:.75rem;">@w.Description</td>
                                <td style="padding:.75rem;">@w.OnlineHours</td>
                                <td style="padding:.75rem;">@w.OfflineHours</td>
                                <td style="padding:.75rem;">@w.OtherHours</td>
                                <td style="padding:.75rem;">@(w.OnlineHours + w.OfflineHours + w.OtherHours)</td>
                                <td style="padding:.75rem;">@w.Status</td>
                            </tr>
                            index++;
                        }
                    }
                </tbody>
            </table>
        }
        else if (filterMode == "Employee")
        {
            <div style="display:flex;gap:1rem;flex-wrap:wrap;margin-bottom:1rem;">
                <div style="flex:1;min-width:220px;">
                    <label style="font-weight:600;color:#102b3f;">Select Employee:</label>
                    <select @bind="selectedEmployeeId" style="width:100%;padding:.5rem .75rem;border-radius:.375rem;border:1px solid #ccc;background:#f7f0fc;box-shadow:0 2px 5px rgba(0,0,0,.1);">
                        <option value="">-- All Employees --</option>
                        @foreach (var e in employees)
                        {
                            <option value="@e.Id">@e.FirstName @e.LastName</option>
                        }
                    </select>
                </div>
                <div style="flex:1;min-width:160px;">
                    <label style="font-weight:600;color:#102b3f;">Start Date:</label>
                    <input type="date" @bind="startDate" style="width:100%;padding:.5rem .75rem;border-radius:.375rem;border:1px solid #ccc;background:#fff;box-shadow:0 2px 5px rgba(0,0,0,.1);" />
                </div>
                <div style="flex:1;min-width:160px;">
                    <label style="font-weight:600;color:#102b3f;">End Date:</label>
                    <input type="date" @bind="endDate" style="width:100%;padding:.5rem .75rem;border-radius:.375rem;border:1px solid #ccc;background:#fff;box-shadow:0 2px 5px rgba(0,0,0,.1);" />
                </div>
            </div>

            <button @onclick="LoadWorklogs" style="background:linear-gradient(90deg,#a06cd5,#6247aa);color:white;padding:.5rem 1rem;border:none;border-radius:.375rem;box-shadow:0 3px 8px rgba(0,0,0,.2);cursor:pointer;transition:all .3s ease;margin-bottom:1rem;">Search</button>

            <div style="display:flex;gap:1rem;flex-wrap:wrap;margin-bottom:1rem;">
                <div style="flex:2;min-width:220px;">
                    <label style="font-weight:600;color:#102b3f;">Search:</label>
                    <input type="text" placeholder="Search by ID or Name"
                           @bind="searchTerm" @bind:event="oninput"
                           style="width:100%;padding:.5rem .75rem;border-radius:.375rem;
                                      border:1px solid #ccc;background:#fff;
                                      box-shadow:0 2px 5px rgba(0,0,0,.1);" />
                </div>

                <div style="flex:1;min-width:180px;">
                    <label style="font-weight:600;color:#102b3f;">Status:</label>
                    <select @bind="selectedStatus" @bind:event="onchange"
                            style="width:100%;padding:.5rem .75rem;border-radius:.375rem;
                                       border:1px solid #ccc;background:#f7f0fc;
                                       box-shadow:0 2px 5px rgba(0,0,0,.1);">
                        <option value="">-- All --</option>
                        @foreach (var status in Enum.GetValues<WorklogStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
            </div>

            <table style="width:100%;border-collapse:collapse;box-shadow:0 3px 8px rgba(0,0,0,.1);
                      border-radius:.5rem;overflow:hidden;margin-bottom:2rem;">
                <thead style="background:#6247aa;color:white;">
                    <tr>
                        <th style="padding:.75rem;text-align:left;">S.No</th>
                        <th style="padding:.75rem;">Project Id</th>
                        <th style="padding:.75rem;cursor:pointer;">Project Name</th>
                        <th style="padding:.75rem;cursor:pointer;">Date</th>
                        <th style="padding:.75rem;">Worklog Description</th>
                        <th style="padding:.75rem;cursor:pointer;">Online</th>
                        <th style="padding:.75rem;cursor:pointer;">Offline</th>
                        <th style="padding:.75rem;cursor:pointer;">Other</th>
                        <th style="padding:.75rem;cursor:pointer;">Total</th>
                        <th style="padding:.75rem;cursor:pointer;">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredWorklogs != null)
                    {
                        int index = 1;
                        foreach (var w in filteredWorklogs)
                        {
                            <tr style="background:@(index % 2 == 0 ? "#f7f0fc" : "white");transition:all .3s ease;"
                                onmouseover="this.style.background='#e2cfea'"
                                onmouseout="this.style.background='@(index % 2 == 0 ? "#f7f0fc" : "white")'">
                                <td style="padding:.75rem;">@index</td>
                                <td style="padding:.75rem;">@w.Project?.ProjectId</td>
                                <td style="padding:.75rem;">@w.Project?.Name</td>
                                <td style="padding:.75rem;">@w.Date.ToShortDateString()</td>
                                <td style="padding:.75rem;">@w.Description</td>
                                <td style="padding:.75rem;">@w.OnlineHours</td>
                                <td style="padding:.75rem;">@w.OfflineHours</td>
                                <td style="padding:.75rem;">@w.OtherHours</td>
                                <td style="padding:.75rem;">@(w.OnlineHours + w.OfflineHours + w.OtherHours)</td>
                                <td style="padding:.75rem;">@w.Status</td>
                            </tr>
                            index++;
                        }
                    }
                </tbody>
            </table>
        }
    }
</ProtectedPage>


@code {
    private bool CurrentUserLoaded = false;
    private List<Project> projects = new();
    private List<User> employees = new();
    private List<Worklog> worklogs = new();
    private List<Worklog> filteredWorklogs = new();

    private string filterMode = "Project";
    private int? selectedProjectId;
    private int? selectedEmployeeId;
    private DateTime? startDate;
    private DateTime? endDate;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            ApplyFiltersAndSorting();
        }
    }
    private string _searchTerm = string.Empty;
    private string? selectedStatus
    {
        get => _selectedStatus;
        set
        {
            _selectedStatus = value;
            ApplyFiltersAndSorting();
        }
    }
    private string? _selectedStatus;

    private string sortColumn = "Date";
    private bool sortAscending = true;

    private string[] managerRoles = new[] { "Manager" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CurrentUserService.LoadUserAsync();
            CurrentUserLoaded = true;

            if (CurrentUserService.CurrentUser != null)
            {
                projects = await ProjectService.GetMyProjectsAsync();
                employees = await UserService.GetEmployeesAsync();
            }

            StateHasChanged();
        }
    }

    private async Task LoadWorklogs()
    {
        worklogs.Clear();

        if (filterMode == "Project" && selectedProjectId.HasValue)
            worklogs = await WorklogService.GetWorklogsByProjectAsync(selectedProjectId.Value);
        else if (filterMode == "Employee" && selectedEmployeeId.HasValue)
            worklogs = await WorklogService.GetWorklogsByEmployeeAsync(selectedEmployeeId.Value);
        else
        {
            foreach (var p in projects)
            {
                var logs = await WorklogService.GetWorklogsByProjectAsync(p.Id);
                worklogs.AddRange(logs);
            }
        }

        if (startDate.HasValue)
            worklogs = worklogs.Where(w => w.Date.ToDateTime(TimeOnly.MinValue) >= startDate.Value).ToList();

        if (endDate.HasValue)
            worklogs = worklogs.Where(w => w.Date.ToDateTime(TimeOnly.MinValue) <= endDate.Value).ToList();

        ApplyFiltersAndSorting();
    }

    private void ApplyFiltersAndSorting()
    {
        if (worklogs == null)
        {
            filteredWorklogs = new List<Worklog>();
            return;
        }

        var query = worklogs.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var lower = searchTerm.ToLower();
            query = query.Where(w =>
                (w.User != null &&
                 ($"{w.User.FirstName} {w.User.LastName}".ToLower().Contains(lower) ||
                  w.User.EmployeeId.ToString().Contains(lower))) ||
                (w.Project != null &&
                 (w.Project.Name.ToLower().Contains(lower) ||
                  w.Project.ProjectId.ToLower().Contains(lower)))
            );
        }

        if (!string.IsNullOrEmpty(selectedStatus) && Enum.TryParse<WorklogStatus>(selectedStatus, out var parsedStatus))
            query = query.Where(w => w.Status == parsedStatus);

        query = sortColumn switch
        {
            "Name" => sortAscending
                ? query.OrderBy(w => filterMode == "Project"
                    ? w.User!.FirstName + " " + w.User!.LastName
                    : w.Project!.Name)
                : query.OrderByDescending(w => filterMode == "Project"
                    ? w.User!.FirstName + " " + w.User!.LastName
                    : w.Project!.Name),

            nameof(Worklog.Date) => sortAscending
                ? query.OrderBy(w => w.Date)
                : query.OrderByDescending(w => w.Date),

            nameof(Worklog.OnlineHours) => sortAscending
                ? query.OrderBy(w => w.OnlineHours)
                : query.OrderByDescending(w => w.OnlineHours),

            nameof(Worklog.OfflineHours) => sortAscending
                ? query.OrderBy(w => w.OfflineHours)
                : query.OrderByDescending(w => w.OfflineHours),

            nameof(Worklog.OtherHours) => sortAscending
                ? query.OrderBy(w => w.OtherHours)
                : query.OrderByDescending(w => w.OtherHours),

            "TotalHours" => sortAscending
                ? query.OrderBy(w => w.OnlineHours + w.OfflineHours + w.OtherHours)
                : query.OrderByDescending(w => w.OnlineHours + w.OfflineHours + w.OtherHours),

            nameof(Worklog.Status) => sortAscending
                ? query.OrderBy(w => w.Status)
                : query.OrderByDescending(w => w.Status),

            _ => query
        };

        filteredWorklogs = query.ToList();
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
            sortColumn = column;

        ApplyFiltersAndSorting();
    }

    private void PrepareExport()
    {
        var key = $"export_worklogs_{CurrentUserService.CurrentUser!.Id}";
        Cache.Set(key, filteredWorklogs, TimeSpan.FromMinutes(5));
        Navigation.NavigateTo($"/export/worklogs?key={key}", forceLoad: true);
    }
}

@page "/manager/projects/form/{Id:int?}"
@using WorklogApp.Models
@using WorklogApp.Services
@inject ProjectService ProjectService
@inject CurrentUserService CurrentUserService
@inject NavigationManager Navigation

<ProtectedPage TPage="object" AllowedRoles="@managerRoles">

    <h3>@(Id == 0 ? "Add Project" : "Edit Project")</h3>

    @if (!CurrentUserLoaded)
    {
        <p><em>Loading...</em></p>
    }
    else if (CurrentUserService.CurrentUser == null)
    {
        <p class="text-danger">You must be logged in as a manager to create/edit projects.</p>
    }
    else
    {
        <EditForm Model="@project" OnValidSubmit="SaveProject">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Project ID</label>
                <InputText class="form-control" @bind-Value="project.ProjectId" />
            </div>

            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="project.Name" />
            </div>

            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputTextArea class="form-control" @bind-Value="project.Description" />
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </EditForm>
    }

</ProtectedPage>

@code {
    [Parameter] public int? Id { get; set; }
    private Project project = new();
    private bool CurrentUserLoaded = false;

    private string[] managerRoles = new[] { "Manager" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CurrentUserService.LoadUserAsync();
            CurrentUserLoaded = true;
            StateHasChanged();

            if (Id.HasValue && Id.Value > 0)
            {
                var existing = await ProjectService.GetProjectAsync(Id.Value);
                if (existing != null)
                {
                    project = existing;
                }
            }
        }
    }

    private async Task SaveProject()
    {
        if (Id == null || Id == 0)
            await ProjectService.AddProjectAsync(project);
        else
            await ProjectService.UpdateProjectAsync(project);

        Navigation.NavigateTo("/manager/projects");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/manager/projects");
    }
}

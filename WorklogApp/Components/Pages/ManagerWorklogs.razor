@page "/manager/worklogs"
@using WorklogApp.Models
@using WorklogApp.Services
@inject WorklogService WorklogService
@inject ProjectService ProjectService
@inject CurrentUserService CurrentUserService
@inject NavigationManager Navigation

<ProtectedPage TPage="object" AllowedRoles="@managerRoles">
    <h3 style="text-align:center; color:#6247aa; padding:0.75rem 1rem;">
        Worklogs Approval
    </h3>

    @if (!CurrentUserLoaded)
    {
        <p><em>Loading...</em></p>
    }
    else if (CurrentUserService.CurrentUser == null)
    {
        Navigation.NavigateTo("/");
    }
    else if (projects == null)
    {
        <p><em>Loading projects...</em></p>
    }
    else
    {
        <div style="margin-bottom:1rem;">
            <label style="font-weight:600; color:#102b3f;">Select Project:</label>
            <select @onchange="OnProjectChange"
                    style="width:100%; padding:0.5rem 0.75rem;
                               font-size:1rem; border-radius:0.375rem;
                               border:1px solid #ccc; background:#f7f0fc;
                               margin-top:0.25rem; transition:all 0.3s ease;"
                    onfocus="this.style.boxShadow='0 0 0 3px #e2cfea'"
                    onblur="this.style.boxShadow='none'">
                <option value="">-- All Projects --</option>
                @foreach (var p in projects)
                {
                    <option value="@p.Id" selected="@(selectedProjectId == p.Id)">
                        @p.Name
                    </option>
                }
            </select>
        </div>

        <div style="overflow-x:auto; background:white; border-radius:0.5rem;
                        box-shadow:0 4px 12px rgba(0,0,0,0.15);">
            <table style="width:100%; border-collapse:collapse; font-size:0.95rem;">
                <thead>
                    <tr style="background:#e2cfea; text-align:left;">
                        <th style="padding:0.75rem;">Employee</th>
                        <th style="padding:0.75rem;">Date</th>
                        <th style="padding:0.75rem;">Project</th>
                        <th style="padding:0.75rem;">Online</th>
                        <th style="padding:0.75rem;">Offline</th>
                        <th style="padding:0.75rem;">Other</th>
                        <th style="padding:0.75rem;">Description</th>
                        <th style="padding:0.75rem;">Status</th>
                        <th style="padding:0.75rem;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (worklogs != null)
                    {
                        @foreach (var w in worklogs)
                        {
                            <tr style="border-bottom:1px solid #f0e6f7;
                                                   transition:background 0.2s ease;"
                                onmouseover="this.style.background='#f7f0fc'"
                                onmouseout="this.style.background='white'">
                                <td style="padding:0.75rem;">@w.User?.FirstName @w.User?.LastName</td>
                                <td style="padding:0.75rem;">@w.Date</td>
                                <td style="padding:0.75rem;">@w.Project?.Name</td>
                                <td style="padding:0.75rem;">@w.OnlineHours</td>
                                <td style="padding:0.75rem;">@w.OfflineHours</td>
                                <td style="padding:0.75rem;">@w.OtherHours</td>
                                <td style="padding:0.75rem;">@w.Description</td>
                                <td style="padding:0.75rem; font-weight:600; color:#6247aa;">
                                    @w.Status
                                </td>
                                <td style="padding:0.75rem;">
                                    @if (w.Status == WorklogStatus.Pending)
                                    {
                                        <button @onclick="() => Approve(w.Id)"
                                                style="background:#062726; color:white;
                                                                       border:none; padding:0.4rem 0.9rem;
                                                                       border-radius:0.375rem; font-size:0.85rem;
                                                                       margin-right:0.5rem; cursor:pointer;
                                                                       box-shadow:0 2px 6px rgba(0,0,0,0.25);
                                                                       transition:all 0.3s ease;"
                                                onmouseover="this.style.transform='translateY(-2px)';this.style.boxShadow='0 6px 14px rgba(6,39,38,0.5)'"
                                                onmouseout="this.style.transform='none';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.25)'">
                                            Approve
                                        </button>

                                        <button @onclick="() => Reject(w.Id)"
                                                style="background:#a06cd5; color:white;
                                                                       border:none; padding:0.4rem 0.9rem;
                                                                       border-radius:0.375rem; font-size:0.85rem;
                                                                       cursor:pointer;
                                                                       box-shadow:0 2px 6px rgba(0,0,0,0.25);
                                                                       transition:all 0.3s ease;"
                                                onmouseover="this.style.transform='translateY(-2px)';this.style.boxShadow='0 6px 14px rgba(160,108,213,0.6)'"
                                                onmouseout="this.style.transform='none';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.25)'">
                                            Reject
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</ProtectedPage>

@code {
    private List<Project>? projects;
    private List<Worklog>? worklogs;
    private int? selectedProjectId;
    private bool CurrentUserLoaded = false;
    private string[] managerRoles = new[] { "Manager" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CurrentUserService.LoadUserAsync();
            CurrentUserLoaded = true;
            StateHasChanged();

            if (CurrentUserService.CurrentUser != null)
            {
                projects = await ProjectService.GetMyProjectsAsync();
                await LoadWorklogs();
                StateHasChanged();
            }
        }
    }

    private async Task OnProjectChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int projectId))
        {
            selectedProjectId = projectId;
        }
        else
        {
            selectedProjectId = null;
        }

        await LoadWorklogs();
    }

    private async Task LoadWorklogs()
    {
        if (selectedProjectId.HasValue)
        {
            worklogs = await WorklogService.GetWorklogsByProjectAsync(selectedProjectId.Value);
        }
        else
        {
            var allWorklogs = new List<Worklog>();
            foreach (var p in projects!)
            {
                var logs = await WorklogService.GetWorklogsByProjectAsync(p.Id);
                allWorklogs.AddRange(logs);
            }
            worklogs = allWorklogs.OrderByDescending(w => w.Date).ToList();
        }
    }

    private async Task Approve(int worklogId)
    {
        await WorklogService.ApproveWorklogAsync(worklogId);
        await LoadWorklogs();
    }

    private async Task Reject(int worklogId)
    {
        await WorklogService.RejectWorklogAsync(worklogId);
        await LoadWorklogs();
    }
}

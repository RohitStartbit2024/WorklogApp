@page "/"
@using Microsoft.AspNetCore.Identity
@using WorklogApp.Models
@using Microsoft.EntityFrameworkCore

@inject NavigationManager navManager
@inject WorklogApp.Services.CurrentUserService CurrentUserService
@inject WorklogApp.Data.AppDbContext AppDbContext

<div >

        <h3 style="text-align:center; margin-bottom:1.5rem; font-weight:bold; background: linear-gradient(90deg, #6a11cb, #2575fc); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
            Worklog App
        </h3>

        <EditForm Model="@loginModel" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div style="margin-bottom:1rem;">
                <label style="font-weight:600;">Email</label>
                <InputText @bind-Value="loginModel.Email" placeholder="Enter your email" style="width:100%; padding:0.5rem 0.75rem; font-size:1rem; border-radius:0.375rem; border:1px solid #ccc;" />
            </div>

            <div style="margin-bottom:1rem; position:relative;">
                <label style="font-weight:600;">Password</label>

                <InputText @bind-Value="loginModel.Password"
                           type="@passwordInputType"
                           placeholder="Enter your password"
                           style="width:100%; padding:0.5rem 2.5rem 0.5rem 0.75rem; font-size:1rem; border-radius:0.375rem; border:1px solid #ccc;" />

                <!-- Toggle Button -->
                <button type="button"
                        @onclick="TogglePasswordVisibility"
                        style="position:absolute; right:0.75rem; top:50%; transform:translateY(-20%); background:none; border:none; cursor:pointer; font-size:1rem;">
                    @(isPasswordVisible ? "🙈" : "👁️")
                </button>
            </div>

            <button type="submit" style="width:100%; padding:0.5rem 1rem; font-size:1rem; font-weight:600; border:none; border-radius:0.375rem; background: linear-gradient(90deg, #6a11cb, #2575fc); color:white; cursor:pointer;">
                Login
            </button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="color:#dc3545; margin-top:1rem; text-align:center;">@errorMessage</div>
            }
        </EditForm>

        <div style="text-align:center; margin-top:1.5rem;">
            <small style="color:#6c757d;">© 2025 WorklogApp</small>
        </div>
    </div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";
    private bool isPasswordVisible = false;
    private string passwordInputType => isPasswordVisible ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private async Task LoginUser()
    {
        var user = await AppDbContext.Users
            .Include(u => u.UserRole)
            .FirstOrDefaultAsync(u => u.Email == loginModel.Email);

        if (user == null)
        {
            errorMessage = "Invalid credentials";
            return;
        }

        var passwordHasher = new PasswordHasher<User>();
        var result = passwordHasher.VerifyHashedPassword(user, user.Password, loginModel.Password);

        if (result == PasswordVerificationResult.Success)
        {
            await CurrentUserService.SetUserAsync(user);
            var roleName = user.UserRole?.Role ?? "";
            switch (roleName)
            {
                case "Manager":
                    navManager.NavigateTo("/manager/projects");
                    break;
                case "Employee":
                    navManager.NavigateTo("/employee/worklogs");
                    break;
                case "Admin":
                    navManager.NavigateTo("/admin/users");
                    break;
                default:
                    navManager.NavigateTo("/");
                    break;
            }
        }
        else
        {
            errorMessage = "Invalid credentials";
        }
    }
}
